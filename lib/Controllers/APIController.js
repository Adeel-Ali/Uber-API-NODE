/**
 * UberAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/09/2016
 */

var _request = require('../Http/Client/RequestClient'),
    _configuration = require('../configuration'),
    _APIHelper = require('../APIHelper');

var APIController = {

    /**
     * The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {double} latitude    Required parameter: Latitude component of location.
     *     {double} longitude    Required parameter: Longitude component of location.
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {ProductCollection}
     */
    getProductsTypes : function(input, callback){
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/products";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "latitude" : input.latitude,
            "longitude" : input.longitude
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                } else if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request.", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited.", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error.", errorCode: 500, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    },


    /**
     * The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {double} endLatitude    Required parameter: Latitude component of end location.
     *     {double} endLongitude    Required parameter: Longitude component of end location.
     *     {double} startLatitude    Required parameter: Latitude component of start location.
     *     {double} startLongitude    Required parameter: Longitude component of start location.
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {PriceEstimateCollection}
     */
    getPriceEstimates : function(input, callback){
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/estimates/price";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "end_latitude" : input.endLatitude,
            "end_longitude" : input.endLongitude,
            "start_latitude" : input.startLatitude,
            "start_longitude" : input.startLongitude
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                } else if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request.", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited.", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error.", errorCode: 500, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    },


    /**
     * The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {double} startLatitude    Required parameter: Latitude component of the start location
     *     {double} startLongitude    Required parameter: Longitude component of the start location
     *     {string|null} customerUuid    Optional parameter: The customer id interested in estimate
     *     {string|null} productId    Optional parameter: Id of the requested product
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {TimeEstimateCollection}
     */
    getTimeEstimates : function(input, callback){
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/estimates/time";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "start_latitude" : input.startLatitude,
            "start_longitude" : input.startLongitude,
            "customer_uuid" : input.customerUuid,
            "product_id" : input.productId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                } else if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request.", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited.", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error.", errorCode: 500, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    },


    /**
     * The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {int} limit    Required parameter: Number of items to return for pagging
     *     {int} offset    Required parameter: Page offset for pagging
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {UserActivity}
     */
    getUserActivityV11 : function(input, callback){
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1.1/history";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "limit" : input.limit,
            "offset" : input.offset
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                } else if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request.", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited.", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error.", errorCode: 500, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    },


    /**
     * The User Profile endpoint returns information about the Uber user that has authorized with the application.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {UserProfile}
     */
    getUserProfile : function(callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/me";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                } else if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request.", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited.", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error.", errorCode: 500, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    },


    /**
     * Get product details w.r.t id
     * @param {string} productId    Required parameter: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {Product}
     */
    getProductDetailByID : function(productId, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/products/{product_id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "product_id" : productId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                }callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
            }
        }
        _request(_options, cb);
        
    },


    /**
     * The Promotions endpoint returns information about the promotion that will be available to a new user based on their activity's location. These promotions do not apply for existing users.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {double} endLatitude    Required parameter: Latitude component of end location.
     *     {double} endLongitude    Required parameter: Longitude component of end location.
     *     {double} startLatitude    Required parameter: Latitude component of start location.
     *     {double} startLongitude    Required parameter: Longitude component of start location
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {PromotionsResponse}
     */
    getPromotions : function(input, callback){
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/promotions";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "end_latitude" : input.endLatitude,
            "end_longitude" : input.endLongitude,
            "start_latitude" : input.startLatitude,
            "start_longitude" : input.startLongitude
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                } else if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request.", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json.", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 409) {
                    callback({errorMessage: "A conflict needs to be resolved before the request can be made.", errorCode: 409, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error.", errorCode: 500, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 222) {
                    callback({errorMessage: "bac", errorCode: 222, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    },


    /**
     * The Request endpoint allows a ride to be requested on behalf of an Uber user given their desired product, start, and end locations. Please review the Sandbox documentation on how to develop and test against these endpoints without making real-world Requests and being charged.
     * @param {RequestBody} body    Required parameter: TODO: type description here
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {Request}
     */
    createRequest : function(body, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/requests";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Remove null values
        _APIHelper.cleanObject(body);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body : _APIHelper.jsonSerialize(body),
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                } else if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 409) {
                    callback({errorMessage: "A conflict needs to be resolved before the request can be made.", errorCode: 409, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited.", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error.", errorCode: 500, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    },


    /**
     * Get the real time status of an ongoing trip that was created using the Ride Request endpoint.
     * @param {string} requestId    Required parameter: TODO: type description here
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {RequestDetailsCollections}
     */
    getRequestDetails : function(requestId, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/requests/{request_id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "request_id" : requestId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                } else if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request.", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json.", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 409) {
                    callback({errorMessage: "A conflict needs to be resolved before the request can be made.", errorCode: 409, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited.", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error", errorCode: 500, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    },


    /**
     * Cancel an ongoing Request on behalf of a rider.
     * @param {string} requestId    Required parameter: Unique identifier representing a Request.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {void}
     */
    deleteRequestCancel : function(requestId, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/requests/{request_id}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "request_id" : requestId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "DELETE",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,_response.body,_context);
            }else{
                //Error handling using HTTP status codes
                if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request.", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 404) {
                    callback({errorMessage: "Not found", errorCode: 404, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json.", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 409) {
                    callback({errorMessage: "A conflict needs to be resolved before the request can be made", errorCode: 409, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited.", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error", errorCode: 500, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    },


    /**
     * Get a map with a visual representation of a Request.
     * @param {string} requestId    Required parameter: Unique identifier representing a Request.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {RequestMapResponse}
     */
    getRequestMap : function(requestId, callback){

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/v1/requests/{request_id}/map";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "request_id" : requestId
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error){
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            }else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                callback(null,JSON.parse(_response.body),_context);
            }else{
                //Error handling using HTTP status codes
                if(_response.statusCode == 404){
                    callback(null,null,_context);
                    return;
                } else if (_response.statusCode == 400) {
                    callback({errorMessage: "Malformed request.", errorCode: 400, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized the request requires user authentication (not logged in).", errorCode: 401, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues", errorCode: 403, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 406) {
                    callback({errorMessage: "Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json.", errorCode: 406, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 409) {
                    callback({errorMessage: "A conflict needs to be resolved before the request can be made.", errorCode: 409, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 422) {
                    callback({errorMessage: "Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", errorCode: 422, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 429) {
                    callback({errorMessage: "Too Many Requests. Rate limited.", errorCode: 429, errorResponse:_response.body},null,_context);
                } else if (_response.statusCode == 500) {
                    callback({errorMessage: "Internal Server Error.", errorCode: 500, errorResponse:_response.body},null,_context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
                }
            }
        }
        _request(_options, cb);
        
    }

};

module.exports = APIController;